! +-------------------------------------------+
! | Author: Jose Antonio Quinonero Gris       |
! | Creation date: Sunday 17:19:49 13-11-2022 |
! +-------------------------------------------+
subroutine Taylor2(y0, t0, tf, h, nterms, ders, t, y)
    !
    ! Taylor's method:
    ! y(t) = y_0 + y_0' * h + 1/2 y_0'' * h**2 + 1/6 y_0''' * h**3 + ...
    !      = sum_{k=0}^n 1/n! * y_0^{(n)'} * h^n
    !
    use IO, only: params
    !
    implicit none
    !
    ! Initial values are passed as a 1D array 'y0'
    ! Initial 't0' and final time 'tf', as well as time step 'h', are passed
    ! as scalar
    ! Results are stored in 1D array for time 't', and 2D array for 'y'
    !
    real(kind=8), dimension(:), intent(in) :: y0
    real(kind=8), intent(in) :: t0, tf, h
    integer, intent(in) :: nterms
    real(kind=8), dimension(:,:), intent(in) :: ders
    real(kind=8), dimension(:), allocatable, intent(out) :: t
    real(kind=8), dimension(:,:), allocatable, intent(out) :: y
    !
    ! Dummy variables
    !
    integer :: i, j, ierr, nt
    real(kind=8) :: dt
    real(kind=8), dimension(:), allocatable :: xtmp
    real(kind=8), dimension(:), allocatable :: yp0, yp1, yp2
    !
    abstract interface
        function func(t, y) result(res)
            implicit none
            real(kind=8), optional, intent(in) :: t
            real(kind=8), dimension(:), intent(in) :: y
            real(kind=8), dimension(:), allocatable :: res
        end function func
    end interface
    !
    procedure(func) :: LV
    !
    ! Check that the number of elements of the derivatives array 'ders' is
    ! greater (or equal) than the terms of the expansion, 'nterms'
    !
    if (nterms > size(ders,1)) then
        write(*,*) 'ERROR taylor.f90: Number of terms to compute exceedes &
                  & size of derivatives array.'
        stop
    end if
    !
    ! Number of points
    !
    nt = int( (tf - t0)/h ) + 1
    !
    ! Allocate arrays
    !
    allocate(t(nt), stat=ierr)
    if (ierr .ne. 0) stop 'Taylor2.f90: Error in allocation of t'
    !
    allocate(y(nt,size(y0)), stat=ierr)
    if (ierr .ne. 0) stop 'Taylor2.f90: Error in allocation of y'
    !
    allocate(xtmp(size(y0)), stat=ierr)
    if (ierr .ne. 0) stop 'Taylor2.f90: Error in allocation of xtmp'
    !
    allocate(yp0(size(y0)), stat=ierr)
    if (ierr .ne. 0) stop 'Taylor2.f90: Error in allocation of yp3'
    !
    allocate(yp1(size(y0)), stat=ierr)
    if (ierr .ne. 0) stop 'Taylor2.f90: Error in allocation of yp1'
    !
    allocate(yp2(size(y0)), stat=ierr)
    if (ierr .ne. 0) stop 'Taylor2.f90: Error in allocation of yp2'
    !
    y = 0.0_8 ; t = 0.0_8
    !
    ! Initial values
    !
    y(1,:) = y0(:)
    t(1) = t0
    !
    ! Calculation
    !
    l1: do i = 1, nt-1
        !!
        !! If any individual becomes <0, stop the calculation
        !!
        !do j = 1, size(y0)
        !    if ( y(i,j) < 0 ) exit
        !end do
        !
        ! Time
        !
        dt = dble(i) * h
        !
        t(i+1) = t0 + dt
        !
        ! y(t)
        !
        do j = 1, size(y0)-1
            !
            yp0(:)     = LV( t(i), y(i,:) )
            !
            yp1(j)     = params(1,j) * yp0(j) + params(3,j) * ( &
                       & y(i,j) * yp0(j+1) + yp0(j) * y(i,j+1) )
            yp1(j+1)   = params(1,j+1) * yp0(j+1) + params(3,j+1) * ( &
                       & y(i,j+1) * yp0(j) + yp0(j+1) * y(i,j) )
            !
            yp2(j)     = params(1,j) * yp1(j) + params(3,j) * ( &
                       & y(i,j) * yp1(j+1) + 2.0_8 * yp0(j) * yp0(j+1) + &
                       & yp1(j) * y(i,j+1) )
            yp2(j+1)   = params(1,j+1) * yp1(j+1) + params(3,j+1) * ( &
                       & y(i,j+1) * yp1(j) + 2.0_8 * yp0(j+1) * yp0(j) + &
                       & yp1(j+1) * y(i,j) )
            !
            y(i+1,j)   = y(i,j) + yp0(j) * h + &
                       & 1.0_8/2.0_8 * yp1(j) * h**2 + &
                       & 1.0_8/6.0_8 * yp2(j) * h**3
            y(i+1,j+1) = y(i,j+1) + yp0(j+1) * h + &
                       & 1.0_8/2.0_8 * yp1(j+1) * h**2 + &
                       & 1.0_8/6.0_8 * yp2(j+1) * h**3
            !
        end do
        !
    end do l1
    !
    return
end subroutine taylor2
